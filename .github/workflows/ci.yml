name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================
  # Code Quality Checks
  # ===========================================
  lint-python:
    name: 🐍 Python Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend-core, auth-service, payment-service, llm-proxy, rag-service]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ matrix.service }}/requirements.txt

      - name: 🔍 Run Black
        run: black --check ${{ matrix.service }}/

      - name: 🔍 Run isort
        run: isort --check-only ${{ matrix.service }}/

      - name: 🔍 Run flake8
        run: flake8 ${{ matrix.service }}/

      - name: 🔒 Run Bandit
        run: bandit -r ${{ matrix.service }}/

      - name: 🧪 Run MyPy
        run: mypy ${{ matrix.service }}/ --ignore-missing-imports

  lint-javascript:
    name: 🟨 JavaScript/TypeScript Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟨 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint:js

      - name: 🎨 Check Prettier
        run: npm run check:js

  # ===========================================
  # Security Checks
  # ===========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔍 Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ===========================================
  # Unit Tests
  # ===========================================
  test-python:
    name: 🧪 Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend-core, auth-service, payment-service, llm-proxy, rag-service]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ matrix.service }}/requirements.txt

      - name: 🧪 Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          cd ${{ matrix.service }}
          pytest --cov=. --cov-report=xml --cov-report=html

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  test-javascript:
    name: 🧪 JavaScript Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟨 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm run test:js

  # ===========================================
  # Docker Build and Push
  # ===========================================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [lint-python, lint-javascript, security, test-python, test-javascript]
    strategy:
      matrix:
        service: [frontend, api-gateway, backend-core, auth-service, payment-service, llm-proxy, rag-service]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===========================================
  # Integration Tests
  # ===========================================
  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Start services
        run: |
          cp .env.example .env.local
          docker-compose up -d --wait

      - name: 🧪 Run health checks
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Test API Gateway
          curl -f http://localhost:8080/health || exit 1
          
          # Test Backend Core
          curl -f http://localhost:8080/api/core/ || exit 1
          
          # Test Auth Service
          curl -f http://localhost:8080/api/auth/ || exit 1

      - name: 📋 Show logs on failure
        if: failure()
        run: docker-compose logs

      - name: 🧹 Cleanup
        run: docker-compose down --volumes

  # ===========================================
  # Deployment
  # ===========================================
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          # TODO: Add actual deployment steps
          # This could be:
          # - Deploy to Kubernetes
          # - Deploy to Docker Swarm
          # - Deploy to cloud provider
          # - Update infrastructure as code
          echo "✅ Deployment completed!"

  # ===========================================
  # Notifications
  # ===========================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: 📢 Send notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
          # TODO: Add actual notifications
          # This could be:
          # - Slack notification
          # - Discord webhook
          # - Email notification
          # - Teams message 
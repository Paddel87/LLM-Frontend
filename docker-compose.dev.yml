version: '3.8'

# Development-spezifische Services und Overrides
services:
  # ===================================================
  # DATABASE SERVICES
  # ===================================================
  postgres-db:
    image: postgres:15-alpine
    container_name: llm_postgres_dev
    environment:
      POSTGRES_DB: llm_frontend_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d llm_frontend_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - llm-network

  redis:
    image: redis:7-alpine
    container_name: llm_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - llm-network

  # ===================================================
  # BACKEND SERVICES
  # ===================================================
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: llm_api_gateway_dev
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - LOG_LEVEL=debug
      - SERVICE_NAME=api-gateway
      - BACKEND_CORE_URL=http://backend-core:8001
      - LLM_PROXY_URL=http://llm-proxy:8002
      - AUTH_SERVICE_URL=http://auth-service:8003
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    depends_on:
      - backend-core
      - llm-proxy
      - auth-service
    networks:
      - llm-network

  backend-core:
    build:
      context: ./backend-core
      dockerfile: Dockerfile
    container_name: llm_backend_core_dev
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres-db:5432/llm_frontend_db
      - DATABASE_DEBUG=true
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=30
      - LOG_LEVEL=debug
      - SERVICE_NAME=backend-core
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend-core:/app
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - llm-network

  llm-proxy:
    build:
      context: ./llm-proxy
      dockerfile: Dockerfile
    container_name: llm_proxy_dev
    ports:
      - "8002:8002"
    environment:
      - LOG_LEVEL=debug
      - SERVICE_NAME=llm-proxy
      - ENVIRONMENT=development
      # LLM Provider API Keys (set in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - RUNPOD_API_KEY=${RUNPOD_API_KEY:-}
      - RUNPOD_ENDPOINT_URL=${RUNPOD_ENDPOINT_URL:-}
      # Cache Configuration
      - REDIS_URL=redis://redis:6379/1
      - CACHE_TTL=3600
    volumes:
      - ./llm-proxy:/app
    depends_on:
      - redis
    networks:
      - llm-network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: llm_auth_service_dev
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres-db:5432/llm_frontend_db
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=30
      - LOG_LEVEL=debug
      - SERVICE_NAME=auth-service
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/2
      # Email Configuration (for development)
      - SMTP_HOST=${SMTP_HOST:-smtp.mailtrap.io}
      - SMTP_PORT=${SMTP_PORT:-2525}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL:-noreply@llm-frontend.local}
    volumes:
      - ./auth-service:/app
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - llm-network

  # ===================================================
  # DEVELOPMENT TOOLS
  # ===================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: llm_pgadmin_dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@llm-frontend.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres-db
    networks:
      - llm-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: llm_redis_commander_dev
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - llm-network

  # ===================================================
  # MONITORING
  # ===================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: llm_prometheus_dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - llm-network

  grafana:
    image: grafana/grafana:latest
    container_name: llm_grafana_dev
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - llm-network

# ===================================================
# NETWORKS
# ===================================================
networks:
  llm-network:
    driver: bridge
    name: llm-frontend-network

# ===================================================
# VOLUMES
# ===================================================
volumes:
  postgres_data:
    name: llm_postgres_data_dev
  redis_data:
    name: llm_redis_data_dev
  pgadmin_data:
    name: llm_pgadmin_data_dev
  prometheus_data:
    name: llm_prometheus_data_dev
  grafana_data:
    name: llm_grafana_data_dev 
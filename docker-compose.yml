version: '3.8'

services:
  # UI/Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8080}
      - REACT_APP_WEBSOCKET_URL=${REACT_APP_WEBSOCKET_URL:-ws://localhost:8080/ws}
    env_file:
      - .env.local
    networks:
      - app-network
    depends_on:
      - api-gateway

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=api-gateway
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8080}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
    env_file:
      - .env.local
    networks:
      - app-network
    depends_on:
      - backend-core
      - auth-service
      - llm-proxy
      - rag-service
      - payment-service

  # Backend Core Logic
  backend-core:
    build:
      context: ./backend-core
      dockerfile: Dockerfile
    volumes:
      - ./backend-core:/app
      - /app/__pycache__
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres-db:5432/llm_frontend_db}
      - SERVICE_NAME=backend-core
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
    env_file:
      - .env.local
    networks:
      - app-network
    depends_on:
      - postgres-db
    restart: unless-stopped

  # Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    volumes:
      - ./auth-service:/app
      - /app/__pycache__
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres-db:5432/llm_frontend_db}
      - SERVICE_NAME=auth-service
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-jwt-secret}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS:-24}
    env_file:
      - .env.local
    networks:
      - app-network
    depends_on:
      - postgres-db
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    volumes:
      - ./payment-service:/app
      - /app/__pycache__
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres-db:5432/llm_frontend_db}
      - SERVICE_NAME=payment-service
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    env_file:
      - .env.local
    networks:
      - app-network
    depends_on:
      - postgres-db
    restart: unless-stopped

  # LLM Proxy Service
  llm-proxy:
    build:
      context: ./llm-proxy
      dockerfile: Dockerfile
    volumes:
      - ./llm-proxy:/app
      - /app/__pycache__
    environment:
      - SERVICE_NAME=llm-proxy
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - RUNPOD_API_KEY=${RUNPOD_API_KEY}
    env_file:
      - .env.local
    networks:
      - app-network
    restart: unless-stopped

  # RAG Service
  rag-service:
    build:
      context: ./rag-service
      dockerfile: Dockerfile
    volumes:
      - ./rag-service:/app
      - /app/__pycache__
    environment:
      - SERVICE_NAME=rag-service
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - VECTORDB_URL=${VECTORDB_URL:-http://vectordb:6333}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
    env_file:
      - .env.local
    networks:
      - app-network
    depends_on:
      - vectordb
    restart: unless-stopped

  # PostgreSQL Database
  postgres-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-llm_frontend_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-llm_frontend_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vector Database
  vectordb:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (f√ºr Sessions und Caching)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  qdrant_data:
  redis_data: